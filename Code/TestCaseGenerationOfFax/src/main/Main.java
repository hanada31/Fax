package main;

import generator.ICCGenerator;
import generator.TestGenerationofAll;
import io.Output2File;

import java.io.File;
import java.util.HashSet;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

import soot.PackManager;
import utils.ConstantUtils;
import utils.MyConfig;
import utils.Utils;
import model.AppModel;
import analyzer.DataAnalyzer;
import analyzer.SootAnalyzer;
import androlic.config.AndrolicConfigurationManager;
import androlic.config.BaseConfiguration;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

//java -jar lib/Fax.jar -v 23 -p apk\ -n IntentBench.apk -maxPathNumber 10000 -outputBasePath Result_testGen\androlicOutput  -o Result_testGen\ -exlib >  Result_testGen\executeInfo\IntentBench.txt 2>&1
public class Main {
	
	private String[] mCmdArgs = null;
    private CommandLine mCmd = null;
    static AppModel appModel;
    
  
	public Main(String[] args) {
		 mCmdArgs = args;
	     mCmd = getCmd();  
	}
	
	public static void main(String[] args) {
		Main myClass = new Main(args);
		myClass.start();
	}

	private CommandLine getCmd(){
        CommandLineParser parser = new DefaultParser();

        try {
			return parser.parse(getOptions(), mCmdArgs);
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
    }
	private Options getOptions(){
        Options options = new Options(); 

        options.addOption("h", false, "-h: Show the help information.");
        
        options.addOption("v", true, "-v: Version of Android SDK.");
                
        options.addOption("w", false, "-w: Write sootOutput or not.");
        
        options.addOption("exlib", false, "-exlib: Exclude the activities not declared in app's package.");
        
        options.addOption("type", true, "-type[default:shimple]: Set the type of IR: jimple or shimple.");
        
        options.addOption("time", true, "-time[default:90]: the max running time (min).");
        
        options.addOption("n", true, "-n: the name of the apk under analysis.");
        
        options.addOption("p", true, "-p: the path to the apk under analysis.");
        
        options.addOption("o", true, "-o: the output folder of the apk.");

        
        options.addOption("act", true, "-act[default:All]: the activity to be analyzed: EA/IA/All.");
        
        options.addOption("maxPathNumber", true, "-maxRecursiveInvocationLevel[default: 100000]: max path number that Androlic can generate when analzes a method.");
        options.addOption("outputBasePath", true, "-outputBasePath[default: output]: the directory to save output file generated by Androlic.");

        return options;
    }
    private void start(){
    	 if (null == mCmd){
         	System.exit(-1);
         }
    	 //help
    	 if (mCmd.hasOption("h")){
             HelpFormatter formatter = new HelpFormatter();
             formatter.printHelp("java -jar Fax.jar [options]", getOptions());
             System.exit(0);
         }
    	 //type
    	MyConfig.getInstance().isJimple=false; //64s
    	
    	if(mCmd.hasOption("v")){
    		ConstantUtils.ANDROIDTARGET = "android-"+mCmd.getOptionValue("v"); //443s
    	}else{
    		ConstantUtils.ANDROIDTARGET = "android-17";
    		System.out.println("The default sdk version is 17, use option -v for customize.");
    	}
    	
    	if(mCmd.hasOption("type")){
    		if(mCmd.getOptionValue("type").equals("jimple")){
    			MyConfig.getInstance().isJimple=true; //443s
    		}
    	}
    	//time
    	final Integer timeLimit; //default value
    	if(mCmd.hasOption("time")){
    		timeLimit = Integer.valueOf(mCmd.getOptionValue("time"));
    	}else{
    		timeLimit = 90;
    	}
		Timer timer = new Timer();
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				System.out.println(" Complete analysis stopped due to timeout of " + timeLimit+ " minutes!!!");
				System.exit(0);
			}
		}, timeLimit * 60000);
		
		
		if(mCmd.hasOption("n") && mCmd.hasOption("p") && mCmd.hasOption("o")){
			String name = mCmd.getOptionValue("n");
			String path = mCmd.getOptionValue("p") + File.separator + name;
			ConstantUtils.RESULTFOLDER = mCmd.getOptionValue("o");
			Utils.createFolder(ConstantUtils.RESULTFOLDER);
			System.out.println("Analyzing " +name);
			analyzeSingleApk( path, name);
		}else{
			HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("java -jar Fax.jar [options]", getOptions());
            System.exit(0);
		}
		
		System.out.println("Fax Finish...\n");
		System.exit(0);
    }

		
	private void analyzeSingleApk( String appPath, String appName) {
		BaseConfiguration.APK_NAME = appName;
		String[] mArgs = {"-apkBasePath", mCmd.getOptionValue("p","apk/"), 
							"-isJimpleOutput", "0", 
							"-androidPath", "../lib",
							"-maxPathNumber", mCmd.getOptionValue("maxPathNumber", "100000"),
							"-outputBasePath", mCmd.getOptionValue("outputBasePath", "androlicOutput"),
							"-maxRecursiveInvocationLevel", "1"	};
//		System.out.println(mArgs.length);
		AndrolicConfigurationManager.init(mArgs);
		long startTime = System.currentTimeMillis();

		appModel = new AppModel(appPath, appName);
		appModel.ops.parseManifet(mCmd.hasOption("exlib"));
		
		SootAnalyzer sa = new SootAnalyzer(appModel);
		sa.analyze();		
		
		DataAnalyzer da = new DataAnalyzer(appModel);
		da.analyze(mCmd.getOptionValue("act","All"));
		
		ICCGenerator ig = new ICCGenerator(appModel);
		ig.generate();
		
		outputFiles(appModel);
		
		testGeneration(appModel, true);
		

		//time print
		long endTime   = System.currentTimeMillis(); 
		System.out.println("---------------------------------------");
		System.out.println("Total time: " +(endTime - startTime)/1000 +"seconds"); 
		System.out.println("Analyzing "+appName+ " Finish...\n");	
	}


	private void testGeneration(AppModel appModel, boolean b) {
		File fd = new File(ConstantUtils.RESULTFOLDER + ConstantUtils.TESTCASEFOLDER + appModel.appName + File.separator);
		if(!fd.exists())	
			fd.mkdirs();
		Set<String> iccAll =  new HashSet<String>();
		TestGenerationofAll tg = new TestGenerationofAll(appModel, iccAll);
		tg.analyze(b);
		
	}

	private void outputFiles(AppModel appModel) {

		String summary_app_dir = ConstantUtils.RESULTFOLDER + ConstantUtils.SUMMARYFOLDER  + appModel.appName;
		File f = new File(summary_app_dir);
		f.mkdirs();
		Output2File.writeActivity(summary_app_dir +  File.separator, appModel.appName+"_"+ConstantUtils.ACTIVITYLIST,  appModel);
		Output2File.writeExActivity(summary_app_dir +  File.separator, appModel.appName+"_"+ConstantUtils.EALIST,  appModel);
		
		if (mCmd.hasOption("w"))
			PackManager.v().writeOutput();	
		
		Output2File.writeManifest(summary_app_dir +  File.separator, ConstantUtils.MYMANIFEST,  appModel);
		
		Output2File.writeUsedActivityModel(summary_app_dir +  File.separator, ConstantUtils.ACTUSE,  appModel);
		Output2File.write_DeclaredActivityModel(summary_app_dir + File.separator + ConstantUtils.ACTDEC, appModel );
		Output2File.writeStatistic(summary_app_dir +  File.separator, ConstantUtils.STATISTIC,  appModel);
		
		Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.USEDACTION,  appModel.used_action_item_map_of_app, appModel);
		Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.DECLAREDACTION,  appModel.declared_action_item_map_of_app, appModel);
		
		Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.USEDCATEGORY,  appModel.used_category_item_map_of_app, appModel);
		Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.DECLAREDCATEGORY,  appModel.declared_category_item_map_of_app,appModel);
		
		Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.USEDDATA,  appModel.used_data_item_map_of_app,appModel);
		Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.DECLAREDDATA,  appModel.declared_data_item_map_of_app,appModel);
		
		Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.USEDTYPE,  appModel.used_type_item_map_of_app,appModel);
		Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.DECLAREDTYPE,  appModel.declared_type_item_map_of_app,appModel);
		
		Output2File.writeCompare(summary_app_dir +  File.separator, ConstantUtils.COMPARE, appModel, "Action", false);
		Output2File.writeCompare(summary_app_dir +  File.separator, ConstantUtils.COMPARE, appModel, "Category", true);
		Output2File.writeCompare(summary_app_dir +  File.separator, ConstantUtils.COMPARE, appModel, "Data", true);
		Output2File.writeCompare(summary_app_dir +  File.separator, ConstantUtils.COMPARE, appModel, "Type", true);
		
		Output2File.write4(summary_app_dir +  File.separator, ConstantUtils.SYSTEMSERVICE,  appModel.systemServiceMap, appModel);
		
		
		Output2File.write_RES_file(summary_app_dir + File.separator + ConstantUtils.RESFILE, appModel);
		Output2File.write_AUPs(summary_app_dir + File.separator , ConstantUtils.AUPFILE, appModel);
		if(appModel.atgEdges != null){
			Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.ATG,  appModel.atgEdges,appModel);
			Output2File.writeAttributes(summary_app_dir +  File.separator, ConstantUtils.ATGREACHABLE,  appModel.atgReachableMap,appModel);
		}
		Output2File.writeDotFile(summary_app_dir +  File.separator, ConstantUtils.ATGDOT,  appModel.atgEdges,appModel);
	
	}
}